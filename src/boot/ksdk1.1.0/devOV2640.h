#ifndef WARP_BUILD_ENABLE_DEVOV2640
#define WARP_BUILD_ENABLE_DEVOV2640
#endif

/*
 * This file is part of the OpenMV project.
 * Copyright (c) 2013/2014 Ibrahim Abdelkader <i.abdalkader@gmail.com>
 * This work is licensed under the MIT license, see the file LICENSE for details.
 *
 * OV2640 register definitions.
 */
#ifndef __REG_REGS_H__
#define __REG_REGS_H__

#define OV2640_CHIPID_HIGH 	0x0A
#define OV2640_CHIPID_LOW 	0x0B
/* DSP register bank FF=0x00*/
#define R_BYPASS            0x05
#define QS                  0x44
#define CTRLI               0x50
#define HSIZE               0x51
#define VSIZE               0x52
#define XOFFL               0x53
#define YOFFL               0x54
#define VHYX                0x55
#define DPRP                0x56
#define TEST                0x57
#define ZMOW                0x5A
#define ZMOH                0x5B
#define ZMHH                0x5C
#define BPADDR              0x7C
#define BPDATA              0x7D
#define CTRL2               0x86
#define CTRL3               0x87
#define SIZEL               0x8C
#define HSIZE8              0xC0
#define VSIZE8              0xC1
#define CTRL0               0xC2
#define CTRL1               0xC3
#define R_DVP_SP            0xD3
#define IMAGE_MODE          0xDA
#define RESET               0xE0
#define MS_SP               0xF0
#define SS_ID               0xF7
#define SS_CTRL             0xF7
#define MC_BIST             0xF9
#define MC_AL               0xFA
#define MC_AH               0xFB
#define MC_D                0xFC
#define P_CMD               0xFD
#define P_STATUS            0xFE
#define BANK_SEL            0xFF

#define CTRLI_LP_DP         0x80
#define CTRLI_ROUND         0x40

#define CTRL0_AEC_EN        0x80
#define CTRL0_AEC_SEL       0x40
#define CTRL0_STAT_SEL      0x20
#define CTRL0_VFIRST        0x10
#define CTRL0_YUV422        0x08
#define CTRL0_YUV_EN        0x04
#define CTRL0_RGB_EN        0x02
#define CTRL0_RAW_EN        0x01

#define CTRL2_DCW_EN        0x20
#define CTRL2_SDE_EN        0x10
#define CTRL2_UV_ADJ_EN     0x08
#define CTRL2_UV_AVG_EN     0x04
#define CTRL2_CMX_EN        0x01

#define CTRL3_BPC_EN        0x80
#define CTRL3_WPC_EN        0x40

#define R_DVP_SP_AUTO_MODE  0x80

#define R_BYPASS_DSP_EN         0x00
#define R_BYPASS_DSP_BYPAS      0x01

#define IMAGE_MODE_Y8_DVP_EN    0x40
#define IMAGE_MODE_JPEG_EN      0x10
#define IMAGE_MODE_YUV422       0x00
#define IMAGE_MODE_RAW10        0x04
#define IMAGE_MODE_RGB565       0x08
#define IMAGE_MODE_HREF_VSYNC   0x02
#define IMAGE_MODE_LBYTE_FIRST  0x01

#define RESET_MICROC            0x40
#define RESET_SCCB              0x20
#define RESET_JPEG              0x10
#define RESET_DVP               0x04
#define RESET_IPU               0x02
#define RESET_CIF               0x01

#define MC_BIST_RESET           0x80
#define MC_BIST_BOOT_ROM_SEL    0x40
#define MC_BIST_12KB_SEL        0x20
#define MC_BIST_12KB_MASK       0x30
#define MC_BIST_512KB_SEL       0x08
#define MC_BIST_512KB_MASK      0x0C
#define MC_BIST_BUSY_BIT_R      0x02
#define MC_BIST_MC_RES_ONE_SH_W 0x02
#define MC_BIST_LAUNCH          0x01


typedef enum {
    BANK_DSP, BANK_SENSOR, BANK_MAX
} ov2640_bank_t;

/* Sensor register bank FF=0x01*/
#define GAIN                0x00
#define COM1                0x03
#define REG04               0x04
#define REG08               0x08
#define COM2                0x09
#define REG_PID             0x0A
#define REG_VER             0x0B
#define COM3                0x0C
#define COM4                0x0D
#define AEC                 0x10
#define CLKRC               0x11
#define COM7                0x12
#define COM8                0x13
#define COM9                0x14 /* AGC gain ceiling */
#define COM10               0x15
#define HSTART              0x17
#define HSTOP               0x18
#define VSTART              0x19
#define VSTOP               0x1A
#define MIDH                0x1C
#define MIDL                0x1D
#define AEW                 0x24
#define AEB                 0x25
#define VV                  0x26
#define REG2A               0x2A
#define FRARL               0x2B
#define ADDVSL              0x2D
#define ADDVSH              0x2E
#define YAVG                0x2F
#define HSDY                0x30
#define HEDY                0x31
#define REG32               0x32
#define ARCOM2              0x34
#define REG45               0x45
#define FLL                 0x46
#define FLH                 0x47
#define COM19               0x48
#define ZOOMS               0x49
#define COM22               0x4B
#define COM25               0x4E
#define BD50                0x4F
#define BD60                0x50
#define REG5D               0x5D
#define REG5E               0x5E
#define REG5F               0x5F
#define REG60               0x60
#define HISTO_LOW           0x61
#define HISTO_HIGH          0x62

#define REG04_DEFAULT       0x28
#define REG04_HFLIP_IMG     0x80
#define REG04_VFLIP_IMG     0x40
#define REG04_VREF_EN       0x10
#define REG04_HREF_EN       0x08
#define REG04_SET(x)        (REG04_DEFAULT|x)

#define COM2_STDBY          0x10
#define COM2_OUT_DRIVE_1x   0x00
#define COM2_OUT_DRIVE_2x   0x01
#define COM2_OUT_DRIVE_3x   0x02
#define COM2_OUT_DRIVE_4x   0x03

#define COM3_DEFAULT        0x38
#define COM3_BAND_50Hz      0x04
#define COM3_BAND_60Hz      0x00
#define COM3_BAND_AUTO      0x02
#define COM3_BAND_SET(x)    (COM3_DEFAULT|x)

#define COM7_SRST           0x80
#define COM7_RES_UXGA       0x00 /* UXGA */
#define COM7_RES_SVGA       0x40 /* SVGA */
#define COM7_RES_CIF        0x20 /* CIF  */
#define COM7_ZOOM_EN        0x04 /* Enable Zoom */
#define COM7_COLOR_BAR      0x02 /* Enable Color Bar Test */

#define COM8_DEFAULT        0xC0
#define COM8_BNDF_EN        0x20 /* Enable Banding filter */
#define COM8_AGC_EN         0x04 /* AGC Auto/Manual control selection */
#define COM8_AEC_EN         0x01 /* Auto/Manual Exposure control */
#define COM8_SET(x)         (COM8_DEFAULT|x)

#define COM9_DEFAULT        0x08
#define COM9_AGC_GAIN_2x    0x00 /* AGC:    2x */
#define COM9_AGC_GAIN_4x    0x01 /* AGC:    4x */
#define COM9_AGC_GAIN_8x    0x02 /* AGC:    8x */
#define COM9_AGC_GAIN_16x   0x03 /* AGC:   16x */
#define COM9_AGC_GAIN_32x   0x04 /* AGC:   32x */
#define COM9_AGC_GAIN_64x   0x05 /* AGC:   64x */
#define COM9_AGC_GAIN_128x  0x06 /* AGC:  128x */
#define COM9_AGC_SET(x)     (COM9_DEFAULT|(x<<5))

#define COM10_HREF_EN       0x80 /* HSYNC changes to HREF */
#define COM10_HSYNC_EN      0x40 /* HREF changes to HSYNC */
#define COM10_PCLK_FREE     0x20 /* PCLK output option: free running PCLK */
#define COM10_PCLK_EDGE     0x10 /* Data is updated at the rising edge of PCLK */
#define COM10_HREF_NEG      0x08 /* HREF negative */
#define COM10_VSYNC_NEG     0x02 /* VSYNC negative */
#define COM10_HSYNC_NEG     0x01 /* HSYNC negative */

#define CTRL1_AWB           0x08 /* Enable AWB */

#define VV_AGC_TH_SET(h,l)  ((h<<4)|(l&0x0F))

#define REG32_UXGA          0x36
#define REG32_SVGA          0x09
#define REG32_CIF           0x89

#define CLKRC_2X            0x80
#define CLKRC_2X_UXGA       (0x01 | CLKRC_2X)
#define CLKRC_2X_SVGA       CLKRC_2X
#define CLKRC_2X_CIF        CLKRC_2X

#endif //__REG_REGS_H__


typedef enum
{
	kOV2640BMP					= 0,
	kOV2640JPEG					= 1,
	kOV2640RAW					= 2,
	// Resolution
	kOV2640Resolution_160x120	= 0,	//160x120
	kOV2640Resolution_176x144	= 1,	//176x144
	kOV2640Resolution_320x240	= 2,	//320x240
	kOV2640Resolution_352x288	= 3,	//352x288
	kOV2640Resolution_640x480	= 4,	//640x480
	kOV2640Resolution_800x600	= 5,	//800x600
	kOV2640Resolution_1024x768	= 6,	//1024x768
	kOV2640Resolution_1280x1024	= 7,	//1280x1024
	kOV2640Resolution_1600x1200	= 8,	//1600x1200
	// ARDUCHIP_FIFO
	kOV2640FIFO_CLEAR_MASK    	=	0x01,
	kOV2640FIFO_START_MASK    	=	0x02,
	kOV2640IFO_RDPTR_RST_MASK  	=   0x10,
	kOV2640FIFO_WRPTR_RST_MASK 	=   0x20,
	// TRIGGER
	kOV2640VSYNC_MASK   		= 0x01,
	kOV2640SHUTTER_MASK 		= 0x02,
	kOV2640CAP_DONE_MASK		= 0x08

} OV2640Constants;

typedef enum
{
	kSSD1331CommandTEST					= 0x00,
	kSSD1331CommandFRAMES				= 0x01,
	kSSD1331CommandMODE					= 0x02,
	kSSD1331CommandTIMING				= 0x03,
	kSSD1331CommandARDUCHIP_FIFO		= 0x04,
	kSSD1331CommandGPIODIRECTION		= 0x05,
	kSSD1331CommandGPIOWRITE			= 0x06,
	kSSD1331CommandBURSTFIFOREAD		= 0x3C,
	kSSD1331CommandSINGLEFIFOREAD		= 0x3D,
	kSSD1331CommandVERSION				= 0x40,
	kSSD1331CommandTRIGGER				= 0x41,
	kSSD1331CommandFIFOSIZE1			= 0x42,
	kSSD1331CommandFIFOSIZE2			= 0x43,
	kSSD1331CommandFIFOSIZE3			= 0x44
} OV2640Commands;

struct sensor_reg {
	uint8_t reg;
	uint8_t val;
};

const struct sensor_reg OV2640_TO_CIF[] =
{
    {BANK_SEL, BANK_SENSOR},
    {COM7, COM7_RES_CIF},

    //Set the sensor output window
    {COM1, 0x0A},
    {REG32, REG32_CIF},
    {HSTART, 0x11},
    {HSTOP, 0x43},
    {VSTART, 0x00},
    {VSTOP, 0x25},

    {CLKRC, 0x01},
    {BD50, 0xca},
    {BD60, 0xa8},
    {0x5a, 0x23},
    {0x6d, 0x00},
    {0x3d, 0x38},
    {0x39, 0x92},
    {0x35, 0xda},
    {0x22, 0x1a},
    {0x37, 0xc3},
    {0x23, 0x00},
    {ARCOM2, 0xc0},
    {0x06, 0x88},
    {0x07, 0xc0},
    {COM4, 0x87},
    {0x0e, 0x41},
    {0x4c, 0x00},
    {BANK_SEL, BANK_DSP},
    {RESET, RESET_DVP},

    //Set the sensor resolution (UXGA, SVGA, CIF)
    {HSIZE8, 0x32},
    {VSIZE8, 0x25},
    {SIZEL, 0x00},

    //Set the image window size >= output size
    {HSIZE, 0x64},
    {VSIZE, 0x4a},
    {XOFFL, 0x00},
    {YOFFL, 0x00},
    {VHYX, 0x00},
    {TEST, 0x00},

    {CTRL2, CTRL2_DCW_EN | 0x1D},
    {CTRLI, CTRLI_LP_DP | 0x00},
    {R_DVP_SP, 0x82},
    {0xff, 0xff}
};

const struct sensor_reg OV2640_SETTINGS_YUV422[] =
{
    {BANK_SEL, BANK_DSP},
    {RESET, RESET_DVP},
    {IMAGE_MODE, IMAGE_MODE_YUV422},
    {0xD7, 0x01},
    {0xE1, 0x67},
    {RESET, 0x00},
    {0xff, 0xff}
};

const struct sensor_reg OV2640_TO_JPEG[] = 
{
    {BANK_SEL, BANK_DSP},
    {RESET, RESET_JPEG | RESET_DVP},
    {IMAGE_MODE, IMAGE_MODE_JPEG_EN | IMAGE_MODE_HREF_VSYNC},
    {0xD7, 0x03},
    {0xE1, 0x77},
    {0xE5, 0x1F},
    {0xD9, 0x10},
    {0xDF, 0x80},
    {0x33, 0x80},
    {0x3C, 0x10},
    {R_DVP_SP, 0x04},
    {0xEB, 0x30},
    {0xDD, 0x7F},
    {RESET, 0x00},
    {0xff, 0xff}
};

const struct sensor_reg OV2640_TEST[] =
{
	{0xff, 0x01},
	{0x12, 0x10},
	{0x12, 0x40},
	{0x04, 0x60},
	{0xff,0xff},
};

const struct sensor_reg OV2640_QVGA[] =
{
	{0xff, 0x0},  // register set 0
	{0x2c, 0xff}, // 
	{0x2e, 0xdf}, 
	{0xff, 0x1}, 
	{0x3c, 0x32}, 
	{0x11, 0x0}, 
	{0x9, 0x2}, 
	{0x4, 0xa8}, 
	{0x13, 0xe5}, 
	{0x14, 0x48}, 
	{0x2c, 0xc}, 
	{0x33, 0x78}, 
	{0x3a, 0x33}, 
	{0x3b, 0xfb}, 
	{0x3e, 0x0}, 
	{0x43, 0x11}, 
	{0x16, 0x10}, 
	{0x39, 0x2}, 
	{0x35, 0x88}, 

	{0x22, 0xa}, 
	{0x37, 0x40}, 
	{0x23, 0x0}, 
	{0x34, 0xa0}, 
	{0x6, 0x2}, 
	{0x6, 0x88}, 
	{0x7, 0xc0}, 
	{0xd, 0xb7}, 
	{0xe, 0x1}, 
	{0x4c, 0x0}, 
	{0x4a, 0x81}, 
	{0x21, 0x99}, 
	{0x24, 0x40}, 
	{0x25, 0x38}, 
	{0x26, 0x82}, 
	{0x5c, 0x0}, 
	{0x63, 0x0}, 
	{0x46, 0x22}, 
	{0xc, 0x3a}, 
	{0x5d, 0x55}, 
	{0x5e, 0x7d}, 
	{0x5f, 0x7d}, 
	{0x60, 0x55}, 
	{0x61, 0x70}, 
	{0x62, 0x80}, 
	{0x7c, 0x5}, 
	{0x20, 0x80}, 
	{0x28, 0x30}, 
	{0x6c, 0x0}, 
	{0x6d, 0x80}, 
	{0x6e, 0x0}, 
	{0x70, 0x2}, 
	{0x71, 0x94}, 
	{0x73, 0xc1}, 
	{0x3d, 0x34}, 
	{0x12, 0x4}, 
	{0x5a, 0x57}, 
	{0x4f, 0xbb}, 
	{0x50, 0x9c}, 
	{0xff, 0x0}, 
	{0xe5, 0x7f}, 
	{0xf9, 0xc0}, 
	{0x41, 0x24}, 
	{0xe0, 0x14}, 
	{0x76, 0xff}, 
	{0x33, 0xa0}, 
	{0x42, 0x20}, 
	{0x43, 0x18}, 
	{0x4c, 0x0}, 
	{0x87, 0xd0}, 
	{0x88, 0x3f}, 
	{0xd7, 0x3}, 
	{0xd9, 0x10}, 
	{0xd3, 0x82}, 
	{0xc8, 0x8}, 
	{0xc9, 0x80}, 
	{0x7c, 0x0}, 
	{0x7d, 0x0}, 
	{0x7c, 0x3}, 
	{0x7d, 0x48}, 
	{0x7d, 0x48}, 
	{0x7c, 0x8}, 
	{0x7d, 0x20}, 
	{0x7d, 0x10}, 
	{0x7d, 0xe}, 
	{0x90, 0x0}, 
	{0x91, 0xe}, 
	{0x91, 0x1a}, 
	{0x91, 0x31}, 
	{0x91, 0x5a}, 
	{0x91, 0x69}, 
	{0x91, 0x75}, 
	{0x91, 0x7e}, 
	{0x91, 0x88}, 
	{0x91, 0x8f}, 
	{0x91, 0x96}, 
	{0x91, 0xa3}, 
	{0x91, 0xaf}, 
	{0x91, 0xc4}, 
	{0x91, 0xd7}, 
	{0x91, 0xe8}, 
	{0x91, 0x20}, 
	{0x92, 0x0}, 

	{0x93, 0x6}, 
	{0x93, 0xe3}, 
	{0x93, 0x3}, 
	{0x93, 0x3}, 
	{0x93, 0x0}, 
	{0x93, 0x2}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x93, 0x0}, 
	{0x96, 0x0}, 
	{0x97, 0x8}, 
	{0x97, 0x19}, 
	{0x97, 0x2}, 
	{0x97, 0xc}, 
	{0x97, 0x24}, 
	{0x97, 0x30}, 
	{0x97, 0x28}, 
	{0x97, 0x26}, 
	{0x97, 0x2}, 
	{0x97, 0x98}, 
	{0x97, 0x80}, 
	{0x97, 0x0}, 
	{0x97, 0x0}, 
	{0xa4, 0x0}, 
	{0xa8, 0x0}, 
	{0xc5, 0x11}, 
	{0xc6, 0x51}, 
	{0xbf, 0x80}, 
	{0xc7, 0x10}, 
	{0xb6, 0x66}, 
	{0xb8, 0xa5}, 
	{0xb7, 0x64}, 
	{0xb9, 0x7c}, 
	{0xb3, 0xaf}, 
	{0xb4, 0x97}, 
	{0xb5, 0xff}, 
	{0xb0, 0xc5}, 
	{0xb1, 0x94}, 
	{0xb2, 0xf}, 
	{0xc4, 0x5c}, 
	{0xa6, 0x0}, 
	{0xa7, 0x20}, 
	{0xa7, 0xd8}, 
	{0xa7, 0x1b}, 
	{0xa7, 0x31}, 
	{0xa7, 0x0}, 
	{0xa7, 0x18}, 
	{0xa7, 0x20}, 
	{0xa7, 0xd8}, 
	{0xa7, 0x19}, 
	{0xa7, 0x31}, 
	{0xa7, 0x0}, 
	{0xa7, 0x18}, 
	{0xa7, 0x20}, 
	{0xa7, 0xd8}, 
	{0xa7, 0x19}, 
	{0xa7, 0x31}, 
	{0xa7, 0x0}, 
	{0xa7, 0x18}, 
	{0x7f, 0x0}, 
	{0xe5, 0x1f}, 
	{0xe1, 0x77}, 
	{0xdd, 0x7f}, 
	{0xc2, 0xe}, 
	
	{0xff, 0x0}, 
	{0xe0, 0x4}, 
	{0xc0, 0xc8}, 
	{0xc1, 0x96}, 
	{0x86, 0x3d}, 
	{0x51, 0x90}, 
	{0x52, 0x2c}, 
	{0x53, 0x0}, 
	{0x54, 0x0}, 
	{0x55, 0x88}, 
	{0x57, 0x0}, 
	
	{0x50, 0x92}, 
	{0x5a, 0x50}, 
	{0x5b, 0x3c}, 
	{0x5c, 0x0}, 
	{0xd3, 0x4}, 
	{0xe0, 0x0}, 
	
	{0xff, 0x0}, 
	{0x5, 0x0}, 
	
	{0xda, 0x8}, 
	{0xd7, 0x3}, 
	{0xe0, 0x0}, 
	
	{0x5, 0x0}, 

	
	{0xff,0xff},
};        


const struct sensor_reg OV2640_JPEG_INIT[] =
{
  { 0xff, 0x00 },
  { 0x2c, 0xff },
  { 0x2e, 0xdf },
  { 0xff, 0x01 },
  { 0x3c, 0x32 },
  { 0x11, 0x00 },	
  { 0x09, 0x02 },
  { 0x04, 0x28 },
  { 0x13, 0xe5 },
  { 0x14, 0x48 },
  { 0x2c, 0x0c },
  { 0x33, 0x78 },
  { 0x3a, 0x33 },
  { 0x3b, 0xfB },
  { 0x3e, 0x00 },
  { 0x43, 0x11 },
  { 0x16, 0x10 },
  { 0x39, 0x92 },
  { 0x35, 0xda },
  { 0x22, 0x1a },
  { 0x37, 0xc3 },
  { 0x23, 0x00 },
  { 0x34, 0xc0 },
  { 0x36, 0x1a },
  { 0x06, 0x88 },
  { 0x07, 0xc0 },
  { 0x0d, 0x87 },
  { 0x0e, 0x41 },
  { 0x4c, 0x00 },
  { 0x48, 0x00 },
  { 0x5B, 0x00 },
  { 0x42, 0x03 },
  { 0x4a, 0x81 },
  { 0x21, 0x99 },
  { 0x24, 0x40 },
  { 0x25, 0x38 },
  { 0x26, 0x82 },
  { 0x5c, 0x00 },
  { 0x63, 0x00 },
  { 0x61, 0x70 },
  { 0x62, 0x80 },
  { 0x7c, 0x05 },
  { 0x20, 0x80 },
  { 0x28, 0x30 },
  { 0x6c, 0x00 },
  { 0x6d, 0x80 },
  { 0x6e, 0x00 },
  { 0x70, 0x02 },
  { 0x71, 0x94 },
  { 0x73, 0xc1 },
  { 0x12, 0x40 },
  { 0x17, 0x11 },
  { 0x18, 0x43 },
  { 0x19, 0x00 },
  { 0x1a, 0x4b },
  { 0x32, 0x09 },
  { 0x37, 0xc0 },
  { 0x4f, 0x60 },
  { 0x50, 0xa8 },
  { 0x6d, 0x00 },
  { 0x3d, 0x38 },
  { 0x46, 0x3f },
  { 0x4f, 0x60 },
  { 0x0c, 0x3c },
  { 0xff, 0x00 },
  { 0xe5, 0x7f },
  { 0xf9, 0xc0 },
  { 0x41, 0x24 },
  { 0xe0, 0x14 },
  { 0x76, 0xff },
  { 0x33, 0xa0 },
  { 0x42, 0x20 },
  { 0x43, 0x18 },
  { 0x4c, 0x00 },
  { 0x87, 0xd5 },
  { 0x88, 0x3f },
  { 0xd7, 0x03 },
  { 0xd9, 0x10 },
  { 0xd3, 0x82 },
  { 0xc8, 0x08 },
  { 0xc9, 0x80 },
  { 0x7c, 0x00 },
  { 0x7d, 0x00 },
  { 0x7c, 0x03 },
  { 0x7d, 0x48 },
  { 0x7d, 0x48 },
  { 0x7c, 0x08 },
  { 0x7d, 0x20 },
  { 0x7d, 0x10 },
  { 0x7d, 0x0e },
  { 0x90, 0x00 },
  { 0x91, 0x0e },
  { 0x91, 0x1a },
  { 0x91, 0x31 },
  { 0x91, 0x5a },
  { 0x91, 0x69 },
  { 0x91, 0x75 },
  { 0x91, 0x7e },
  { 0x91, 0x88 },
  { 0x91, 0x8f },
  { 0x91, 0x96 },
  { 0x91, 0xa3 },
  { 0x91, 0xaf },
  { 0x91, 0xc4 },
  { 0x91, 0xd7 },
  { 0x91, 0xe8 },
  { 0x91, 0x20 },
  { 0x92, 0x00 },
  { 0x93, 0x06 },
  { 0x93, 0xe3 },
  { 0x93, 0x05 },
  { 0x93, 0x05 },
  { 0x93, 0x00 },
  { 0x93, 0x04 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x93, 0x00 },
  { 0x96, 0x00 },
  { 0x97, 0x08 },
  { 0x97, 0x19 },
  { 0x97, 0x02 },
  { 0x97, 0x0c },
  { 0x97, 0x24 },
  { 0x97, 0x30 },
  { 0x97, 0x28 },
  { 0x97, 0x26 },
  { 0x97, 0x02 },
  { 0x97, 0x98 },
  { 0x97, 0x80 },
  { 0x97, 0x00 },
  { 0x97, 0x00 },
  { 0xc3, 0xed },
  { 0xa4, 0x00 },
  { 0xa8, 0x00 },
  { 0xc5, 0x11 },
  { 0xc6, 0x51 },
  { 0xbf, 0x80 },
  { 0xc7, 0x10 },
  { 0xb6, 0x66 },
  { 0xb8, 0xA5 },
  { 0xb7, 0x64 },
  { 0xb9, 0x7C },
  { 0xb3, 0xaf },
  { 0xb4, 0x97 },
  { 0xb5, 0xFF },
  { 0xb0, 0xC5 },
  { 0xb1, 0x94 },
  { 0xb2, 0x0f },
  { 0xc4, 0x5c },
  { 0xc0, 0x64 },
  { 0xc1, 0x4B },
  { 0x8c, 0x00 },
  { 0x86, 0x3D },
  { 0x50, 0x00 },
  { 0x51, 0xC8 },
  { 0x52, 0x96 },
  { 0x53, 0x00 },
  { 0x54, 0x00 },
  { 0x55, 0x00 },
  { 0x5a, 0xC8 },
  { 0x5b, 0x96 },
  { 0x5c, 0x00 },
  { 0xd3, 0x00 },	//{ 0xd3, 0x7f },
  { 0xc3, 0xed },
  { 0x7f, 0x00 },
  { 0xda, 0x00 },
  { 0xe5, 0x1f },
  { 0xe1, 0x67 },
  { 0xe0, 0x00 },
  { 0xdd, 0x7f },
  { 0x05, 0x00 },
               
  { 0x12, 0x40 },
  { 0xd3, 0x04 },	//{ 0xd3, 0x7f },
  { 0xc0, 0x16 },
  { 0xC1, 0x12 },
  { 0x8c, 0x00 },
  { 0x86, 0x3d },
  { 0x50, 0x00 },
  { 0x51, 0x2C },
  { 0x52, 0x24 },
  { 0x53, 0x00 },
  { 0x54, 0x00 },
  { 0x55, 0x00 },
  { 0x5A, 0x2c },
  { 0x5b, 0x24 },
  { 0x5c, 0x00 },
  { 0xff, 0xff },
};             

const struct sensor_reg OV2640_YUV422[] = 
{
  { 0xFF, 0x00 },
  { 0x05, 0x00 },
  { 0xDA, 0x10 },
  { 0xD7, 0x03 },
  { 0xDF, 0x00 },
  { 0x33, 0x80 },
  { 0x3C, 0x40 },
  { 0xe1, 0x77 },
  { 0x00, 0x00 },
  { 0xff, 0xff },
};

const struct sensor_reg OV2640_JPEG[] = 
{
  { 0xe0, 0x14 },
  { 0xe1, 0x77 },
  { 0xe5, 0x1f },
  { 0xd7, 0x03 },
  { 0xda, 0x10 },
  { 0xe0, 0x00 },
  { 0xFF, 0x01 },
  { 0x04, 0x08 },
  { 0xff, 0xff },
};

 // JPG 160x120 

const struct sensor_reg OV2640_RGB565[] = {
    {BANK_SEL, BANK_DSP},
    {RESET, RESET_DVP},
    {IMAGE_MODE, IMAGE_MODE_RGB565},
    {0xD7, 0x03},
    {0xE1, 0x77},
    {RESET, 0x00},
    {0, 0},
};

const struct sensor_reg OV2640_160x120_JPEG[] = 
{
  { 0xff, 0x01 },
  { 0x12, 0x40 },
  { 0x17, 0x11 },
  { 0x18, 0x43 },
  { 0x19, 0x00 },
  { 0x1a, 0x4b },
  { 0x32, 0x09 },
  { 0x4f, 0xca },
  { 0x50, 0xa8 },
  { 0x5a, 0x23 },
  { 0x6d, 0x00 },
  { 0x39, 0x12 },
  { 0x35, 0xda },
  { 0x22, 0x1a },
  { 0x37, 0xc3 },
  { 0x23, 0x00 },
  { 0x34, 0xc0 },
  { 0x36, 0x1a },
  { 0x06, 0x88 },
  { 0x07, 0xc0 },
  { 0x0d, 0x87 },
  { 0x0e, 0x41 },
  { 0x4c, 0x00 },
  { 0xff, 0x00 },
  { 0xe0, 0x04 },
  { 0xc0, 0x64 },
  { 0xc1, 0x4b },
  { 0x86, 0x35 },
  { 0x50, 0x92 },
  { 0x51, 0xc8 },
  { 0x52, 0x96 },
  { 0x53, 0x00 },
  { 0x54, 0x00 },
  { 0x55, 0x00 },
  { 0x57, 0x00 },
  { 0x5a, 0x28 },
  { 0x5b, 0x1e },
  { 0x5c, 0x00 },
  { 0xe0, 0x00 },
  { 0xff, 0xff },
};

 // JPG, 0x176x144 

const struct sensor_reg OV2640_176x144_JPEG[] =  
{
  { 0xff, 0x01 },
  { 0x12, 0x40 },
  { 0x17, 0x11 },
  { 0x18, 0x43 },
  { 0x19, 0x00 },
  { 0x1a, 0x4b },
  { 0x32, 0x09 },
  { 0x4f, 0xca },
  { 0x50, 0xa8 },
  { 0x5a, 0x23 },
  { 0x6d, 0x00 },
  { 0x39, 0x12 },
  { 0x35, 0xda },
  { 0x22, 0x1a },
  { 0x37, 0xc3 },
  { 0x23, 0x00 },
  { 0x34, 0xc0 },
  { 0x36, 0x1a },
  { 0x06, 0x88 },
  { 0x07, 0xc0 },
  { 0x0d, 0x87 },
  { 0x0e, 0x41 },
  { 0x4c, 0x00 },
  { 0xff, 0x00 },
  { 0xe0, 0x04 },
  { 0xc0, 0x64 },
  { 0xc1, 0x4b },
  { 0x86, 0x35 },
  { 0x50, 0x92 },
  { 0x51, 0xc8 },
  { 0x52, 0x96 },
  { 0x53, 0x00 },
  { 0x54, 0x00 },
  { 0x55, 0x00 },
  { 0x57, 0x00 },
  { 0x5a, 0x2c },
  { 0x5b, 0x24 },
  { 0x5c, 0x00 },
  { 0xe0, 0x00 },
  { 0xff, 0xff },
};

 // JPG 320x240 

const struct sensor_reg OV2640_320x240_JPEG[] =  
{
  { 0xff, 0x01 },
  { 0x12, 0x40 },
  { 0x17, 0x11 },
  { 0x18, 0x43 },
  { 0x19, 0x00 },
  { 0x1a, 0x4b },
  { 0x32, 0x09 },
  { 0x4f, 0xca },
  { 0x50, 0xa8 },
  { 0x5a, 0x23 },
  { 0x6d, 0x00 },
  { 0x39, 0x12 },
  { 0x35, 0xda },
  { 0x22, 0x1a },
  { 0x37, 0xc3 },
  { 0x23, 0x00 },
  { 0x34, 0xc0 },
  { 0x36, 0x1a },
  { 0x06, 0x88 },
  { 0x07, 0xc0 },
  { 0x0d, 0x87 },
  { 0x0e, 0x41 },
  { 0x4c, 0x00 },
  { 0xff, 0x00 },
  { 0xe0, 0x04 },
  { 0xc0, 0x64 },
  { 0xc1, 0x4b },
  { 0x86, 0x35 },
  { 0x50, 0x89 },
  { 0x51, 0xc8 },
  { 0x52, 0x96 },
  { 0x53, 0x00 },
  { 0x54, 0x00 },
  { 0x55, 0x00 },
  { 0x57, 0x00 },
  { 0x5a, 0x50 },
  { 0x5b, 0x3c },
  { 0x5c, 0x00 },
  { 0xe0, 0x00 },
  { 0xff, 0xff },
};

 // JPG 352x288 
// const struct sensor_reg OV2640_352x288_JPEG[] =  
// {
//   { 0xff, 0x01 },
//   { 0x12, 0x40 },
//   { 0x17, 0x11 },
//   { 0x18, 0x43 },
//   { 0x19, 0x00 },
//   { 0x1a, 0x4b },
//   { 0x32, 0x09 },
//   { 0x4f, 0xca },
//   { 0x50, 0xa8 },
//   { 0x5a, 0x23 },
//   { 0x6d, 0x00 },
//   { 0x39, 0x12 },
//   { 0x35, 0xda },
//   { 0x22, 0x1a },
//   { 0x37, 0xc3 },
//   { 0x23, 0x00 },
//   { 0x34, 0xc0 },
//   { 0x36, 0x1a },
//   { 0x06, 0x88 },
//   { 0x07, 0xc0 },
//   { 0x0d, 0x87 },
//   { 0x0e, 0x41 },
//   { 0x4c, 0x00 },
//   { 0xff, 0x00 },
//   { 0xe0, 0x04 },
//   { 0xc0, 0x64 },
//   { 0xc1, 0x4b },
//   { 0x86, 0x35 },
//   { 0x50, 0x89 },
//   { 0x51, 0xc8 },
//   { 0x52, 0x96 },
//   { 0x53, 0x00 },
//   { 0x54, 0x00 },
//   { 0x55, 0x00 },
//   { 0x57, 0x00 },
//   { 0x5a, 0x58 },
//   { 0x5b, 0x48 },
//   { 0x5c, 0x00 },
//   { 0xe0, 0x00 },  
//   { 0xff, 0xff },
// };

//  // JPG 640x480 
// const struct sensor_reg OV2640_640x480_JPEG[] =  
// {
// 	{0xff, 0x01},
// 	{0x11, 0x01},
// 	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Îª²ÊÌõ
// 	{0x17, 0x11}, // HREFST[10:3]
// 	{0x18, 0x75}, // HREFEND[10:3]
// 	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
// 	{0x19, 0x01}, // VSTRT[9:2]
// 	{0x1a, 0x97}, // VEND[9:2]
// 	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
// 	{0x37, 0x40},
// 	{0x4f, 0xbb},
// 	{0x50, 0x9c},
// 	{0x5a, 0x57},
// 	{0x6d, 0x80},
// 	{0x3d, 0x34},
// 	{0x39, 0x02},
// 	{0x35, 0x88},
// 	{0x22, 0x0a},
// 	{0x37, 0x40},
// 	{0x34, 0xa0},
// 	{0x06, 0x02},
// 	{0x0d, 0xb7},
// 	{0x0e, 0x01},
	
// 	{0xff, 0x00}, 		      
// 	{0xe0, 0x04},       
// 	{0xc0, 0xc8},       
// 	{0xc1, 0x96},       
// 	{0x86, 0x3d},       
// 	{0x50, 0x89},       
// 	{0x51, 0x90},       
// 	{0x52, 0x2c},       
// 	{0x53, 0x00},       
// 	{0x54, 0x00},       
// 	{0x55, 0x88},       
// 	{0x57, 0x00},       
// 	{0x5a, 0xa0},       
// 	{0x5b, 0x78},       
// 	{0x5c, 0x00},       
// 	{0xd3, 0x04},       
// 	{0xe0, 0x00},       
                      
//   	{0xff, 0xff},
// };     
// // JPG 800x600 
// const struct sensor_reg OV2640_800x600_JPEG[] =  
// {
// 	{0xff, 0x01},
// 	{0x11, 0x01},
// 	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Îª²ÊÌõ
// 	{0x17, 0x11}, // HREFST[10:3]
// 	{0x18, 0x75}, // HREFEND[10:3]
// 	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
// 	{0x19, 0x01}, // VSTRT[9:2]
// 	{0x1a, 0x97}, // VEND[9:2]
// 	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
// 	{0x37, 0x40},
// 	{0x4f, 0xbb},
// 	{0x50, 0x9c},
// 	{0x5a, 0x57},
// 	{0x6d, 0x80},
// 	{0x3d, 0x34},
// 	{0x39, 0x02},
// 	{0x35, 0x88},
// 	{0x22, 0x0a},
// 	{0x37, 0x40},
// 	{0x34, 0xa0},
// 	{0x06, 0x02},
// 	{0x0d, 0xb7},
// 	{0x0e, 0x01},
	
// 	{0xff, 0x00},
// 	{0xe0, 0x04},
// 	{0xc0, 0xc8},
// 	{0xc1, 0x96},
// 	{0x86, 0x35},
// 	{0x50, 0x89},
// 	{0x51, 0x90},
// 	{0x52, 0x2c},
// 	{0x53, 0x00},
// 	{0x54, 0x00},
// 	{0x55, 0x88},
// 	{0x57, 0x00},
// 	{0x5a, 0xc8},
// 	{0x5b, 0x96},
// 	{0x5c, 0x00},
// 	{0xd3, 0x02},
// 	{0xe0, 0x00},
                      
//   	{0xff, 0xff},
// };         
// // JPG 1024x768 
// const struct sensor_reg OV2640_1024x768_JPEG[] =  
// {
// 	{0xff, 0x01},
// 	{0x11, 0x01},
// 	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Îª²ÊÌõ
// 	{0x17, 0x11}, // HREFST[10:3]
// 	{0x18, 0x75}, // HREFEND[10:3]
// 	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
// 	{0x19, 0x01}, // VSTRT[9:2]
// 	{0x1a, 0x97}, // VEND[9:2]
// 	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
// 	{0x37, 0x40},
// 	{0x4f, 0xbb},
// 	{0x50, 0x9c},
// 	{0x5a, 0x57},
// 	{0x6d, 0x80},
// 	{0x3d, 0x34},
// 	{0x39, 0x02},
// 	{0x35, 0x88},
// 	{0x22, 0x0a},
// 	{0x37, 0x40},
// 	{0x34, 0xa0},
// 	{0x06, 0x02},
// 	{0x0d, 0xb7},
// 	{0x0e, 0x01},
	
// 	{0xff, 0x00},		  
// 	{0xc0, 0xC8},          
// 	{0xc1, 0x96},          
// 	{0x8c, 0x00},          
// 	{0x86, 0x3D},          
// 	{0x50, 0x00},          
// 	{0x51, 0x90},          
// 	{0x52, 0x2C},          
// 	{0x53, 0x00},          
// 	{0x54, 0x00},          
// 	{0x55, 0x88},          
// 	{0x5a, 0x00},          
// 	{0x5b, 0xC0},          
// 	{0x5c, 0x01},          
// 	{0xd3, 0x02},          

// 	{0xff, 0xff},
// };  

//  // JPG 1280x1024 
// const struct sensor_reg OV2640_1280x1024_JPEG[] =  
// {
// 	{0xff, 0x01},
// 	{0x11, 0x01},
// 	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Îª²ÊÌõ
// 	{0x17, 0x11}, // HREFST[10:3]
// 	{0x18, 0x75}, // HREFEND[10:3]
// 	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
// 	{0x19, 0x01}, // VSTRT[9:2]
// 	{0x1a, 0x97}, // VEND[9:2]
// 	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
// 	{0x37, 0x40},
// 	{0x4f, 0xbb},
// 	{0x50, 0x9c},
// 	{0x5a, 0x57},
// 	{0x6d, 0x80},
// 	{0x3d, 0x34},
// 	{0x39, 0x02},
// 	{0x35, 0x88},
// 	{0x22, 0x0a},
// 	{0x37, 0x40},
// 	{0x34, 0xa0},
// 	{0x06, 0x02},
// 	{0x0d, 0xb7},
// 	{0x0e, 0x01},
	
// 	{0xff, 0x00},     		      
// 	{0xe0, 0x04},           
// 	{0xc0, 0xc8},           
// 	{0xc1, 0x96},           
// 	{0x86, 0x3d},           
// 	{0x50, 0x00},           
// 	{0x51, 0x90},           
// 	{0x52, 0x2c},           
// 	{0x53, 0x00},           
// 	{0x54, 0x00},           
// 	{0x55, 0x88},           
// 	{0x57, 0x00},           
// 	{0x5a, 0x40},           
// 	{0x5b, 0xf0},           
// 	{0x5c, 0x01},           
// 	{0xd3, 0x02},           
// 	{0xe0, 0x00},           
                      
//   	{0xff, 0xff},
// };         
       
//  // JPG 1600x1200 
// const struct sensor_reg OV2640_1600x1200_JPEG[] =  
// {
// 	{0xff, 0x01},
// 	{0x11, 0x01},
// 	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02Îª²ÊÌõ
// 	{0x17, 0x11}, // HREFST[10:3]
// 	{0x18, 0x75}, // HREFEND[10:3]
// 	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
// 	{0x19, 0x01}, // VSTRT[9:2]
// 	{0x1a, 0x97}, // VEND[9:2]
// 	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
// 	{0x37, 0x40},
// 	{0x4f, 0xbb},
// 	{0x50, 0x9c},
// 	{0x5a, 0x57},
// 	{0x6d, 0x80},
// 	{0x3d, 0x34},
// 	{0x39, 0x02},
// 	{0x35, 0x88},
// 	{0x22, 0x0a},
// 	{0x37, 0x40},
// 	{0x34, 0xa0},
// 	{0x06, 0x02},
// 	{0x0d, 0xb7},
// 	{0x0e, 0x01},
	
// 	{0xff, 0x00},        	                              
// 	{0xe0, 0x04},                                   
// 	{0xc0, 0xc8},                                   
// 	{0xc1, 0x96},                                   
// 	{0x86, 0x3d},                                   
// 	{0x50, 0x00},                                   
// 	{0x51, 0x90},                                   
// 	{0x52, 0x2c},                                   
// 	{0x53, 0x00},                                   
// 	{0x54, 0x00},                                   
// 	{0x55, 0x88},                                   
// 	{0x57, 0x00},                                   
// 	{0x5a, 0x90},                                   
// 	{0x5b, 0x2C},                                   
// 	{0x5c, 0x05},              //bit2->1;bit[1:0]->1
// 	{0xd3, 0x02},                                   
// 	{0xe0, 0x00},                                   
                      
//   	{0xff, 0xff}, 	
// };

// const struct sensor_reg OV2640_SVGA[] = 
// {
// 	{0xff, 0x01},
// 	{0x12, 0x80},
// 	{0xff, 0x00},
// 	{0x2c, 0xff},
// 	{0x2e, 0xdf},
// 	{0xff, 0x01},
// 	{0x3c, 0x32},
// 	{0x11, 0x01},
// 	{0x09, 0x02},
// 	{0x04, 0x28},
// 	{0x13, 0xe5},
// 	{0x14, 0x48},
// 	{0x2c, 0x0c},
// 	{0x33, 0x78},
// 	{0x3a, 0x33},
// 	{0x3b, 0xfB},
// 	{0x3e, 0x00},
// 	{0x43, 0x11},
// 	{0x16, 0x10},
// 	{0x39, 0x92},
// 	{0x35, 0xda},
// 	{0x22, 0x1a},
// 	{0x37, 0xc3},
// 	{0x23, 0x00},
// 	{0x34, 0xc0},
// 	{0x36, 0x1a},
// 	{0x06, 0x88},
// 	{0x07, 0xc0},
// 	{0x0d, 0x87},
// 	{0x0e, 0x41},
// 	{0x4c, 0x00},
// 	{0x48, 0x00},
// 	{0x5B, 0x00},
// 	{0x42, 0x03},
// 	{0x4a, 0x81},
// 	{0x21, 0x99},
// 	{0x24, 0x40},
// 	{0x25, 0x38},
// 	{0x26, 0x82},
// 	{0x5c, 0x00},
// 	{0x63, 0x00},
// 	{0x61, 0x70},
// 	{0x62, 0x80},
// 	{0x7c, 0x05},
// 	{0x20, 0x80},
// 	{0x28, 0x30},
// 	{0x6c, 0x00},
// 	{0x6d, 0x80},
// 	{0x6e, 0x00},
// 	{0x70, 0x02},
// 	{0x71, 0x94},
// 	{0x73, 0xc1},
// 	{0x12, 0x40},
// 	{0x17, 0x11},
// 	{0x18, 0x43},
// 	{0x19, 0x00},
// 	{0x1a, 0x4b},
// 	{0x32, 0x09},
// 	{0x37, 0xc0},
// 	{0x4f, 0x60},
// 	{0x50, 0xa8},
// 	{0x6d, 0x00},
// 	{0x3d, 0x38},
// 	{0x46, 0x3f},
// 	{0x4f, 0x60},
// 	{0x0c, 0x3c},
// 	{0xff, 0x00},
// 	{0xe5, 0x7f},
// 	{0xf9, 0xc0},
// 	{0x41, 0x24},
// 	{0xe0, 0x14},
// 	{0x76, 0xff},
// 	{0x33, 0xa0},
// 	{0x42, 0x20},
// 	{0x43, 0x18},
// 	{0x4c, 0x00},
// 	{0x87, 0xd5},
// 	{0x88, 0x3f},
// 	{0xd7, 0x03},
// 	{0xd9, 0x10},
// 	{0xd3, 0x82},
// 	{0xc8, 0x08},
// 	{0xc9, 0x80},
// 	{0x7c, 0x00},
// 	{0x7d, 0x00},
// 	{0x7c, 0x03},
// 	{0x7d, 0x48},
// 	{0x7d, 0x48},
// 	{0x7c, 0x08},
// 	{0x7d, 0x20},
// 	{0x7d, 0x10},
// 	{0x7d, 0x0e},
// 	{0x90, 0x00},
// 	{0x91, 0x0e},
// 	{0x91, 0x1a},
// 	{0x91, 0x31},
// 	{0x91, 0x5a},
// 	{0x91, 0x69},
// 	{0x91, 0x75},
// 	{0x91, 0x7e},
// 	{0x91, 0x88},
// 	{0x91, 0x8f},
// 	{0x91, 0x96},
// 	{0x91, 0xa3},
// 	{0x91, 0xaf},
// 	{0x91, 0xc4},
// 	{0x91, 0xd7},
// 	{0x91, 0xe8},
// 	{0x91, 0x20},
// 	{0x92, 0x00},
// 	{0x93, 0x06},
// 	{0x93, 0xe3},
// 	{0x93, 0x05},
// 	{0x93, 0x05},
// 	{0x93, 0x00},
// 	{0x93, 0x04},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x93, 0x00},
// 	{0x96, 0x00},
// 	{0x97, 0x08},
// 	{0x97, 0x19},
// 	{0x97, 0x02},
// 	{0x97, 0x0c},
// 	{0x97, 0x24},
// 	{0x97, 0x30},
// 	{0x97, 0x28},
// 	{0x97, 0x26},
// 	{0x97, 0x02},
// 	{0x97, 0x98},
// 	{0x97, 0x80},
// 	{0x97, 0x00},
// 	{0x97, 0x00},
// 	{0xc3, 0xed},
// 	{0xa4, 0x00},
// 	{0xa8, 0x00},
// 	{0xc5, 0x11},
// 	{0xc6, 0x51},
// 	{0xbf, 0x80},
// 	{0xc7, 0x10},
// 	{0xb6, 0x66},
// 	{0xb8, 0xA5},
// 	{0xb7, 0x64},
// 	{0xb9, 0x7C},
// 	{0xb3, 0xaf},
// 	{0xb4, 0x97},
// 	{0xb5, 0xFF},
// 	{0xb0, 0xC5},
// 	{0xb1, 0x94},
// 	{0xb2, 0x0f},
// 	{0xc4, 0x5c},
// 	{0xc0, 0x64},
// 	{0xc1, 0x4B},
// 	{0x8c, 0x00},
// 	{0x86, 0x3D},
// 	{0x50, 0x00},
// 	{0x51, 0xC8},
// 	{0x52, 0x96},
// 	{0x53, 0x00},
// 	{0x54, 0x00},
// 	{0x55, 0x00},
// 	{0x5a, 0xC8},
// 	{0x5b, 0x96},
// 	{0x5c, 0x00},
// 	{0xd3, 0x82},
// 	{0xc3, 0xed},
// 	{0x7f, 0x00},
// 	{0xda, 0x00},
// 	{0xe5, 0x1f},
// 	{0xe1, 0x67},
// 	{0xe0, 0x00},
// 	{0xdd, 0x7f},
// 	{0x05, 0x00},
// 	{0xff, 0xff}
// };

// const struct sensor_reg OV2640_640x480_JPEG2[] =
// {
// 	{0xff,0x01},		//001
// 	{0x11,0x01},		//002
// 	{0x12,0x00},		//003
// 	{0x17,0x11},		//004
// 	{0x18,0x75},		//005
// 	{0x32,0x36},		//006
// 	{0x19,0x01},		//007
// 	{0x1a,0x97},		//008
// 	{0x03,0x0f},		//009
// 	{0x37,0x40},		//010
// 	{0x4f,0xbb},		//011
// 	{0x50,0x9c},		//012
// 	{0x5a,0x57},		//013
// 	{0x6d,0x80},		//014
// 	{0x3d,0x34},		//015
// 	{0x39,0x02},		//016
// 	{0x35,0x88},		//017
// 	{0x22,0x0a},		//018
// 	{0x37,0x40},		//019
// 	{0x34,0xa0},		//020
// 	{0x06,0x02},		//021
// 	{0x0d,0xb7},		//022
// 	{0x0e,0x01},		//023
// 	{0xff,0x00},		//024
// 	{0xe0,0x04},		//025
// 	{0xc0,0xc8},		//026
// 	{0xc1,0x96},		//027
// 	{0x86,0x3d},		//028
// 	{0x50,0x89},		//029
// 	{0x51,0x90},		//030
// 	{0x52,0x2c},		//031
// 	{0x53,0x00},		//032
// 	{0x54,0x00},		//033
// 	{0x55,0x88},		//034
// 	{0x57,0x00},		//035
// 	{0x5a,0xa0},		//036
// 	{0x5b,0x78},		//037
// 	{0x5c,0x00},		//038
// 	{0xd3,0x04},		//039
// 	{0xe0,0x00},		//040
// };

void 		initOV2640(const uint8_t i2cAddress, WarpI2CDeviceState volatile *  deviceStatePointer_I2C, WarpSPIDeviceState volatile *  deviceStatePointer_SPI);
int 		devOV2640init();
WarpStatus 	writeSensorRegisterOV2640_I2C_master(uint8_t deviceRegister, uint8_t* payload);
WarpStatus 	readSensorRegisterOV2640_I2C(uint8_t deviceRegister, int numberOfBytes);
WarpStatus 	writeSensorRegisterMultipleOV2640_I2C(const struct sensor_reg reglist[]);
WarpStatus 	writeOV2640_SPI_master(uint8_t command, uint8_t writeValue, int numberOfBytes);
WarpStatus 	devOV2640_FIFO_burst_read(uint8_t* buffer, uint8_t buffer_size);
WarpStatus 	writeOV2640_SPI(uint8_t deviceRegister, uint8_t writeValue);
WarpStatus 	readOV2640_SPI(uint8_t deviceRegister, int numberOfBytes);
void 		readAndPrintOV2640_I2C(uint8_t deviceRegister, int numberOfBytes);
void 		readAndPrintOV2640_SPI(uint8_t deviceRegister, int numberOfBytes);
void 		TestFunctionOV2640_I2C();
void		TestFunctionOV2640_SPI_burst();
void 		TestFunctionOV2640_SPI();
WarpStatus 	devOV2640FlushFifo();
WarpStatus 	devOV2640ClearCaptureDoneFlag();
WarpStatus 	devOV2640StartCapture();
void 		devOV2640HoldUntilCaptureFinished();
void 		devOV2640MakePhoto();
void 		devOV2640SetBank(ov2640_bank_t bank);
WarpStatus 	writeSensorRegisterOV2640_I2C(ov2640_bank_t bank, uint8_t deviceRegister, uint8_t value);
void 		devOV2640setFrameSizeCIF();
void 		devOV2640setFrameSizeQVGA();
void  		devOV2640setPixFormatGrayScale();
WarpStatus 	devOV2640_start_FIFO_burst_read();
WarpStatus 	devOV2640_end_FIFO_burst_read();
void 		TestFunctionOV2640_SPI_single();
void		OV2640_whole_bmp_single_FIFO();
void 		OV2640_whole_bmp_burst_FIFO();
